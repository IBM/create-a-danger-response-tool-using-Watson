{"version":3,"sources":["TextInput.js"],"names":["padding","TextInput","props","state","inputWidth","onInput","bind","e","dummy","target","nextSibling","value","replace","text","textContent","setState","offsetWidth","call","id","empty","width","React","Component","propTypes","PropTypes","func","defaultProps","Math","round","random","placeholder"],"mappings":"oyBAKA,4B,2CACA,sC,qDACA,qC,o7BAPA;;;GASA,GAAMA,SAAU,CAAhB,C,GAEqBC,U,kEACnB,mBAAYC,KAAZ,CAAmB,6IACXA,KADW,GAEjB,MAAKC,KAAL,CAAa,CACXC,WAAYJ,OADD,CAAb,CAGA,MAAKK,OAAL,CAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf,CALiB,aAMlB,C,8DAEOC,C,CAAG,CACT,GAAMC,OAAQD,EAAEE,MAAF,CAASC,WAAvB,CACA;AACA;AACA;AACA;AACA;AACAH,EAAEE,MAAF,CAASE,KAAT,CAAiBJ,EAAEE,MAAF,CAASE,KAAT,CAAeC,OAAf,CAAuB,KAAvB,CAA8B,GAA9B,CAAjB,CAAqD;AACrD,GAAMC,MAAON,EAAEE,MAAF,CAASE,KAAT,CAAeC,OAAf,CAAuB,KAAvB,CAA8B,GAA9B,CAAb,CACAJ,MAAMM,WAAN,CAAoBD,IAApB,CACA,KAAKE,QAAL,CAAc,CACZX,WAAYI,MAAMQ,WAAN,CAAoBhB,OADpB,CAAd,EAIA,GAAI,KAAKE,KAAL,CAAWG,OAAf,CAAwB,CACtB,KAAKH,KAAL,CAAWG,OAAX,CAAmBY,IAAnB,CAAwB,IAAxB,CAA8BV,CAA9B,EACD,CACF,C,uCAEQ,CACP,MACE,wCACE;AACA,QAAS,KAAKL,KAAL,CAAWgB,EAFtB,CAGE,UAAU,YAHZ,EAKE,gDACE,KAAK,MADP,CAEE,UAAW,yBACT,mBADS,CAET,aAFS,CAGT,CAAEC,MAAO,KAAKhB,KAAL,CAAWC,UAAX,GAA0BJ,OAAnC,CAHS,CAFb,CAOE,MAAO,CAAEoB,MACN,KAAKjB,KAAL,CAAWC,UAAX,CAAwBJ,OAAxB,CACI,KAAKG,KAAL,CAAWC,UADf,MAEC,MAHG,CAPT,EAYM,KAAKF,KAZX,EAaE,QAAS,KAAKG,OAbhB,GALF,CAoBE,sCAAM,UAAU,mBAAhB,EApBF,CADF,CAwBD,C,uBArDoCgB,gBAAMC,S,EAwD3C;gBAxDmBrB,S,CAyDrBA,UAAUsB,SAAV,CAAsB,CACpBlB,QAASmB,oBAAUC,IADC,CAAtB,CAIAxB,UAAUyB,YAAV,CAAyB,CACvBR,gBAAiBS,KAAKC,KAAL,CAAWD,KAAKE,MAAL,GAAgB,IAA3B,CADM,CAEvBC,YAAa,gBAFU,CAGvBzB,QAAS,kBAAM,CAAE,CAHM,CAAzB,C","file":"TextInput.js","sourcesContent":["/*\nThis implementation was modeled after the input in\nhttps://conversation-simple.mybluemix.net/\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst padding = 2;\n\nexport default class TextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputWidth: padding,\n    };\n    this.onInput = this.onInput.bind(this);\n  }\n\n  onInput(e) {\n    const dummy = e.target.nextSibling;\n    // this is a hack for when you type space,\n    // input text gets shifted because of mismatched width between\n    // dummy and real input.  Char 'r' is used because it has the same\n    // length as a char ' ' in order for the width of the space to count.\n    // eslint-disable-next-line\n    e.target.value = e.target.value.replace(/\\t/g, ' '); // change tabs to spaces\n    const text = e.target.value.replace(/\\s/g, 'r');\n    dummy.textContent = text;\n    this.setState({\n      inputWidth: dummy.offsetWidth + padding,\n    });\n\n    if (this.props.onInput) {\n      this.props.onInput.call(this, e);\n    }\n  }\n\n  render() {\n    return (\n      <label\n        // eslint-disable-next-line react/prop-types\n        htmlFor={this.props.id}\n        className=\"text-input\"\n      >\n        <input\n          type=\"text\"\n          className={classNames(\n            'text-input--input',\n            'base--input',\n            { empty: this.state.inputWidth === padding }\n          )}\n          style={{ width:\n            (this.state.inputWidth > padding ?\n              `${this.state.inputWidth}px` :\n              '100%'),\n          }}\n          {...this.props}\n          onInput={this.onInput}\n        />\n        <span className=\"text-input--dummy\" />\n      </label>\n    );\n  }\n}\n\n  // all html input[type=\"text\"] properties are valid\nTextInput.propTypes = {\n  onInput: PropTypes.func,\n};\n\nTextInput.defaultProps = {\n  id: `textinput-${Math.round(Math.random() * 1000)}`,\n  placeholder: 'Type Something',\n  onInput: () => {},\n};\n"]}